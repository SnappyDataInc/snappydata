/*
 * Copyright (c) 2018 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'

compileScala.options.encoding = 'UTF-8'

ext {
  spark211Version = '2.1.1'
}

dependencies {
  compileOnly 'org.scala-lang:scala-library:' + scalaVersion
  compileOnly 'org.scala-lang:scala-reflect:' + scalaVersion

  compileOnly 'org.slf4j:slf4j-api:' + slf4jVersion
  compileOnly 'org.slf4j:slf4j-log4j12:' + slf4jVersion
  compileOnly 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
  compileOnly 'org.slf4j:jul-to-slf4j:' + slf4jVersion

  compileOnly("org.apache.spark:spark-core_${scalaBinaryVersion}:${spark211Version}")
  compileOnly("org.apache.spark:spark-catalyst_${scalaBinaryVersion}:${spark211Version}")
  compileOnly("org.apache.spark:spark-sql_${scalaBinaryVersion}:${spark211Version}")
  compileOnly("org.apache.spark:spark-hive_${scalaBinaryVersion}:${spark211Version}")
  compileOnly("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${spark211Version}")

  compileOnly "org.eclipse.jetty:jetty-servlet:${jettyVersion}"

  compile (project(':snappy-core_' + scalaBinaryVersion)) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming-kafka-0-8_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-mllib_' + scalaBinaryVersion)
    exclude(group: 'org.eclipse.jetty', module: 'jetty-servlet')
  }
  compile (project(':compatibility:spark2.1.0_' + scalaBinaryVersion)) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
  }
}

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}


archivesBaseName = "snappydata-spark${spark211Version}_${scalaBinaryVersion}"
shadowJar {
  zip64 = true
  // avoid conflict with the 0.9.2 version in stock Spark
  relocate 'org.apache.thrift', 'io.snappydata.org.apache.thrift'
  // relocate koloboke for possible conflicts with user dependencies
  relocate 'com.koloboke', 'io.snappydata.com.koloboke'
  // relocate the guava's com.google packages
  relocate 'com.google.common', 'io.snappydata.com.google.common'

  mergeServiceFiles()
  exclude 'log4j.properties'

  if (rootProject.hasProperty('enablePublish')) {
    createdBy = 'SnappyData Build Team'
  } else {
    createdBy = System.getProperty('user.name')
  }
  manifest {
    attributes(
      'Manifest-Version'  : '1.0',
      'Created-By'        : createdBy,
      'Title'             : archivesBaseName,
      'Version'           : version,
      'Vendor'            : vendorName
    )
  }
}

// write the POM for spark-package
String sparkPackageName = "snappydata-${version}_${spark211Version}-s_${scalaBinaryVersion}"

task sparkPackagePom(dependsOn: shadowJar) { doLast {
  file("${rootProject.buildDir}/distributions").mkdirs()
  pom {
    project {
      groupId 'SnappyDataInc'
      artifactId 'snappydata'
      version "${version}-s_${scalaBinaryVersion}"
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
    whenConfigured { p -> p.dependencies.clear() }
  }.writeTo("${rootProject.buildDir}/distributions/${sparkPackageName}.pom")
  copy {
    from "${buildDir}/libs"
    into "${rootProject.buildDir}/distributions"
    include "${shadowJar.archiveName}"
    rename { filename -> "${sparkPackageName}.jar" }
  }
} }

task sparkPackage(type: Zip, dependsOn: sparkPackagePom) {
  archiveName "${sparkPackageName}.zip"
  destinationDir = file("${rootProject.buildDir}/distributions")
  outputs.upToDateWhen { false }

  from ("${rootProject.buildDir}/distributions") {
    include "${sparkPackageName}.jar"
    include "${sparkPackageName}.pom"
  }
}
