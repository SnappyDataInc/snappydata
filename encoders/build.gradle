/*
 * Copyright (c) 2017 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */
plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.4'
  id 'de.undercouch.download' version '3.4.3'
}

apply plugin: 'scala'

compileScala.options.encoding = 'UTF-8'
// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.test.scala.srcDirs = ['src/test/java', 'src/test/scala',
                                 'src/dunit/java', 'src/dunit/scala']
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []

dependencies {

  compileOnly 'org.scala-lang:scala-library:' + scalaVersion
  compileOnly 'org.scala-lang:scala-reflect:' + scalaVersion

  compileOnly("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-catalyst_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-streaming-kafka-0-10_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-sql-kafka-0-10_${scalaBinaryVersion}:${sparkTestVersion}")
  compileOnly("org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkTestVersion}")

  testCompile("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-catalyst_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-streaming-kafka-0-10_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-sql-kafka-0-10_${scalaBinaryVersion}:${sparkTestVersion}")
  testCompile("org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkTestVersion}")

  //compile group: 'io.snappydata', name: 'snappydata-store-core', version: snappyStoreVersion
  if (new File(rootDir, 'store/build.gradle').exists()) {
    compile project(':snappy-store:snappydata-store-client')
    compile project(':snappy-store:snappydata-store-core')
  } else {
    compile group: 'io.snappydata', name: 'snappydata-store-client', version: snappyStoreVersion
    compile group: 'io.snappydata', name: 'snappydata-store-core', version: snappyStoreVersion
  }

  compile project(":snappy-jdbc_${scalaBinaryVersion}")

  testCompile project(':dunit')
  testCompile 'org.scala-lang:scala-actors:' + scalaVersion
  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"

  testRuntime files("${projectDir}/../tests/common/src/main/resources")
}

scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

test.dependsOn ':cleanJUnit'

archivesBaseName = 'snappydata-encoders_' + scalaBinaryVersion
shadowJar {
  // avoid conflict with the 0.9.2 version in stock Spark
  relocate 'org.apache.thrift', 'io.snappydata.org.apache.thrift'

  mergeServiceFiles()
  exclude 'log4j.properties'

  if (rootProject.hasProperty('enablePublish')) {
    createdBy = 'SnappyData Build Team'
  } else {
    createdBy = System.getProperty('user.name')
  }
  manifest {
    attributes(
        'Manifest-Version'  : '1.0',
        'Created-By'        : createdBy,
        'Title'             : "snappydata-shared1_${scalaBinaryVersion}",
        'Version'           : version,
        'Vendor'            : vendorName
    )
  }
}