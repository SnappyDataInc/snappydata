apply plugin: 'scala'

compileScala.options.encoding = 'UTF-8'

// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []

dependencies {
  testCompile project(':dunit')
  testCompile project(':snappy-tools_' + scalaBinaryVersion)
  if (new File(rootDir, "snappy-store/build.gradle").exists()) {
    testCompile project(':snappy-store:gemfirexd-client')
    testCompile project(':snappy-store:gemfirexd-core')
    testCompile project(':snappy-store:gemfirexd-tools')
    testCompile project(path: ':snappy-store:gemfirexd-tools', configuration: 'testOutput')
  } else {
    testCompile group: 'io.snappydata', name: 'gemfirexd-client', version: gemfireXDVersion
    testCompile group: 'io.snappydata', name: 'gemfirexd', version: gemfireXDVersion
    testCompile group: 'io.snappydata', name: 'gemfirexd-tools', version: gemfireXDVersion
    testCompile group: 'io.snappydata', name: 'gemfirexd-tools', version: gemfireXDVersion, classifier: 'tests'
  }
  //Uncomment after AQP merge
/*
  if (new File(rootDir, "snappy-aqp/build.gradle").exists()) {
    testCompile project(':snappy-aqp')
  } else {
    testCompile "io.snappydata:snappy-aqp:${version}"
  }
*/

  testCompile project(path: ':snappy-core_' + scalaBinaryVersion, configuration: 'testOutput')
}

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}

testClasses.doLast {
  copyTestsCommonResources(buildDir)
}

test {
  dependsOn ':cleanDUnit'
  dependsOn ':product'
  maxParallelForks = 1
  minHeapSize '128m'
  maxHeapSize '1g'

  jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError', '-XX:MaxPermSize=384m', '-XX:+UseParNewGC', '-XX:+UseConcMarkSweepGC', '-XX:CMSInitiatingOccupancyFraction=50', '-XX:+CMSClassUnloadingEnabled', '-ea']

  include '**/*DUnitTest.class'

  workingDir = "${testResultsBase}/dunit"

  binResultsDir = file("${workingDir}/binary")
  reports.html.destination = file("${workingDir}/html")
  reports.junitXml.destination = file(workingDir)

  systemProperties 'java.net.preferIPv4Stack': 'true',
                   'SNAPPY_HOME': snappyProductDir
}
