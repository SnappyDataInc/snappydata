/*
 * Copyright (c) 2018 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'
compileScala.options.encoding = 'UTF-8'

// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = [ ]
sourceSets.test.scala.srcDir 'src/test/scala'

if (!(new File(rootDir, 'cluster/build.gradle').exists())) {
  ext {
    scalaBinaryVersion = '2.11'
    scalaVersion = scalaBinaryVersion + '.8'
    sparkVersion = '2.1.1'
    snappyVersion = '1.1.0'
    snappySparkVersion = '2.1.1.6'
    sparkDistName = "spark-${sparkVersion}-bin-hadoop2.7"
    sparkCurrentVersion = '2.3.2'
    sparkCurrentDistName = "spark-${sparkCurrentVersion}-bin-hadoop2.7"
    log4jVersion = '1.2.17'
    slf4jVersion = '1.7.25'
    junitVersion = '4.12'
    sparkJobServerVersion = '0.6.2.9'
  }

  repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/big-data/maven' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'http://repository.snappydata.io/repository/internal' }
    maven { url 'http://repository.snappydata.io/repository/snapshots' }
    maven { url 'https://app.camunda.com/nexus/content/repositories/public' }
  }

  dependencies {

    compile 'org.scala-lang:scala-library:' + '2.11.8'
    compile 'org.scala-lang:scala-reflect:' + '2.11.8'
    testCompile "org.scalatest:scalatest_2.11:2.2.6"
    compile 'log4j:log4j:' + log4jVersion
    compile 'org.slf4j:slf4j-api:' + slf4jVersion
    compile 'org.slf4j:slf4j-log4j12:' + slf4jVersion
    testCompile "junit:junit:${junitVersion}"

    compile "io.snappydata:snappydata-core_2.11:${snappyVersion}"
    compile "io.snappydata:snappydata-cluster_2.11:${snappyVersion}"
    compile "io.snappydata:snappy-spark-core_2.11:${sparkVersion}"
    compile "io.snappydata:snappy-spark-catalyst_2.11:${sparkVersion}"
    compile "io.snappydata:snappy-spark-sql_2.11:${sparkVersion}"
  }

  archivesBaseName = 'snappydata-examples_' + '2.11'

} else {
  dependencies {

  compile project(":snappy-cluster_${scalaBinaryVersion}")

  if (new File(rootDir, 'aqp/build.gradle').exists() && rootProject.hasProperty('snappydata.enterprise')) {
    testRuntime project(":snappy-aqp_${scalaBinaryVersion}")
  }

  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"
  testCompile "commons-io:commons-io:2.6"
  testCompile "io.snappydata:gemfire-core:1.6.3"
  testRuntime "org.pegdown:pegdown:${pegdownVersion}"
}

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}

task productExamples(dependsOn: 'jar') { doLast {
  copy {
    from 'src/main/python/*'
    into "${buildDir}" }

  def productDir = file("${rootProject.buildDir}/snappy")
  productDir.mkdirs()
  def exampleArchiveName = "quickstart.jar"
  copy {
    from "${project.buildDir}/libs"
    into "${productDir}/lib"
    include "${project.jar.archiveName}"
    rename { filename -> exampleArchiveName }
  }
} }

archivesBaseName = 'snappydata-examples_' + scalaBinaryVersion

scalaTest {
  dependsOn ':cleanScalaTest', ':product'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

check.dependsOn scalaTest
}