package org.apache.spark.sql.internal

import scala.util.control.NonFatal

import io.snappydata.udf._

import org.apache.spark.sql.AnalysisException
import org.apache.spark.sql.catalyst.analysis.FunctionRegistry._
import org.apache.spark.sql.catalyst.expressions.{Expression, ScalaUDF}


object UDFFunction {

  def makeFunctionBuilder(name: String, clazz: Class[_]): FunctionBuilder = {
    (children: Seq[Expression]) => {
      try {
        children.size match {
          // scalastyle:off line.size.limit

          /** This piece of has been generated by this script
                     (1 to 22).map { x =>
                            val numGenerics = x +1
                            val anys = (1 to numGenerics).map(x => "Any").reduce(_ + ", " + _)
                            val params = (1 to x).map(x => "_ :Any").reduce(_ + ", " + _)

                            s"""case $x =>
                                 val func = clazz.newInstance().asInstanceOf[udf$x[$anys]]
                                 ScalaUDF(func.call($params), func.getDataType, children)
                            """
                           }.foreach(println)

            */

          // Generated code starts
          case 1 =>
            val func = clazz.newInstance().asInstanceOf[udf1[Any, Any]]
            ScalaUDF(func.call(_ :Any), func.getDataType, children)

          case 2 =>
            val func = clazz.newInstance().asInstanceOf[udf2[Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any), func.getDataType, children)

          case 3 =>
            val func = clazz.newInstance().asInstanceOf[udf3[Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 4 =>
            val func = clazz.newInstance().asInstanceOf[udf4[Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 5 =>
            val func = clazz.newInstance().asInstanceOf[udf5[Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 6 =>
            val func = clazz.newInstance().asInstanceOf[udf6[Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 7 =>
            val func = clazz.newInstance().asInstanceOf[udf7[Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 8 =>
            val func = clazz.newInstance().asInstanceOf[udf8[Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 9 =>
            val func = clazz.newInstance().asInstanceOf[udf9[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 10 =>
            val func = clazz.newInstance().asInstanceOf[udf10[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 11 =>
            val func = clazz.newInstance().asInstanceOf[udf11[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 12 =>
            val func = clazz.newInstance().asInstanceOf[udf12[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 13 =>
            val func = clazz.newInstance().asInstanceOf[udf13[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 14 =>
            val func = clazz.newInstance().asInstanceOf[udf14[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 15 =>
            val func = clazz.newInstance().asInstanceOf[udf15[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 16 =>
            val func = clazz.newInstance().asInstanceOf[udf16[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 17 =>
            val func = clazz.newInstance().asInstanceOf[udf17[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 18 =>
            val func = clazz.newInstance().asInstanceOf[udf18[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 19 =>
            val func = clazz.newInstance().asInstanceOf[udf19[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 20 =>
            val func = clazz.newInstance().asInstanceOf[udf20[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 21 =>
            val func = clazz.newInstance().asInstanceOf[udf21[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          case 22 =>
            val func = clazz.newInstance().asInstanceOf[udf22[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]
            ScalaUDF(func.call(_ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any, _ :Any), func.getDataType, children)

          //Generated code end
          // scalastyle:on line.size.limit
          case _ => throw new AnalysisException(s"No handler for SnappyStore UDF '${clazz.getCanonicalName}'")
        }

      } catch {
        case ae: AnalysisException =>
          throw ae
        case NonFatal(e) =>
          val analysisException =
            new AnalysisException(s"No handler for SnappyStore UDF '${clazz.getCanonicalName}': $e")
          analysisException.setStackTrace(e.getStackTrace)
          throw analysisException
      }
    }
  }
}
