/*
 * Copyright (c) 2016 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */
package io.snappydata.udf

import org.apache.spark.sql.types.DataType

// The traits in this file are generated by the following script

/*object UDF extends App {
  (1 to 22).map { x =>
    val params = (1 to x).map(x => s"T$x").reduce(_ + ", " + _)
    val call  = (1 to x).map(x => s"t$x:T$x").reduce(_ + ", " + _)

    s"""
trait udf$x[${params}, R] extends Serializable {

   @throws(classOf[Exception])
   def call($call) : R

   def getDataType: DataType
}
        """
  }.foreach(println)
}*/

// scalastyle:off line.size.limit
trait udf1[T1, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1) : R

  def getDataType: DataType
}


trait udf2[T1, T2, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2) : R

  def getDataType: DataType
}


trait udf3[T1, T2, T3, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3) : R

  def getDataType: DataType
}


trait udf4[T1, T2, T3, T4, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4) : R

  def getDataType: DataType
}


trait udf5[T1, T2, T3, T4, T5, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5) : R

  def getDataType: DataType
}


trait udf6[T1, T2, T3, T4, T5, T6, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6) : R

  def getDataType: DataType
}


trait udf7[T1, T2, T3, T4, T5, T6, T7, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7) : R

  def getDataType: DataType
}


trait udf8[T1, T2, T3, T4, T5, T6, T7, T8, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8) : R

  def getDataType: DataType
}


trait udf9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9) : R

  def getDataType: DataType
}


trait udf10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10) : R

  def getDataType: DataType
}


trait udf11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11) : R

  def getDataType: DataType
}


trait udf12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12) : R

  def getDataType: DataType
}


trait udf13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13) : R

  def getDataType: DataType
}


trait udf14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14) : R

  def getDataType: DataType
}


trait udf15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15) : R

  def getDataType: DataType
}


trait udf16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16) : R

  def getDataType: DataType
}


trait udf17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16, t17:T17) : R

  def getDataType: DataType
}


trait udf18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16, t17:T17, t18:T18) : R

  def getDataType: DataType
}


trait udf19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16, t17:T17, t18:T18, t19:T19) : R

  def getDataType: DataType
}


trait udf20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16, t17:T17, t18:T18, t19:T19, t20:T20) : R

  def getDataType: DataType
}


trait udf21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16, t17:T17, t18:T18, t19:T19, t20:T20, t21:T21) : R

  def getDataType: DataType
}


trait udf22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R] extends Serializable {

  @throws(classOf[Exception])
  def call(t1:T1, t2:T2, t3:T3, t4:T4, t5:T5, t6:T6, t7:T7, t8:T8, t9:T9, t10:T10, t11:T11, t12:T12, t13:T13, t14:T14, t15:T15, t16:T16, t17:T17, t18:T18, t19:T19, t20:T20, t21:T21, t22:T22) : R

  def getDataType: DataType
}
// scalastyle:on line.size.limit