/*
 * Copyright (c) 2017-2019 TIBCO Software Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'
apply plugin: 'de.undercouch.download'

compileScala.options.encoding = 'UTF-8'
// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.test.scala.srcDirs = [ 'src/test/java', 'src/test/scala',
                                  'src/dunit/java', 'src/dunit/scala' ]
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []

def osName = org.gradle.internal.os.OperatingSystem.current()

dependencies {
  compileOnly 'org.scala-lang:scala-library:' + scalaVersion
  compileOnly 'org.scala-lang:scala-reflect:' + scalaVersion

  compile coreLibraries.common
  compile("org.apache.thrift:libthrift:${thriftVersion}") {
    exclude(group: 'org.slf4j', module: 'slf4j-api')
  }
  compile("org.parboiled:parboiled_${scalaBinaryVersion}:${parboiledVersion}") {
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  compileOnly "com.rabbitmq:amqp-client:${rabbitMqVersion}"

  // always use stock spark so that snappy extensions don't get accidently
  // included here in snappy-core code.
  if (System.properties.containsKey('ideaBuild') && new File(rootDir, 'spark/build.gradle').exists()) {
    compile project(':snappy-spark:snappy-spark-core_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-catalyst_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-hive_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming-kafka-0.10_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql-kafka-0.10_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-mllib_' + scalaBinaryVersion)
    compileOnly "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  } else {
    compileOnly coreLibraries.spark
    testCompile coreLibraries.spark
  }

  if (new File(rootDir, 'store/build.gradle').exists()) {
    compile project(':snappy-store:snappydata-store-client')
    compile project(':snappy-store:snappydata-store-core')
    compile project(':snappy-store:snappydata-store-tools')
    testCompile project(path: ':snappy-store:snappydata-store-tools', configuration: 'testOutput')
  } else {
    compile group: 'io.snappydata', name: 'snappydata-store-client', version: snappyStoreVersion
    compile group: 'io.snappydata', name: 'snappydata-store-core', version: snappyStoreVersion
    compile group: 'io.snappydata', name: 'snappydata-store-tools', version: snappyStoreVersion
    testCompile group: 'io.snappydata', name: 'snappydata-store-tools', version: snappyStoreVersion, classifier: 'tests'
  }
  compile project(":snappy-jdbc_${scalaBinaryVersion}")
  compile project(":snappy-encoders_${scalaBinaryVersion}")

  testCompile project(':dunit')
  testCompile 'org.scala-lang:scala-actors:' + scalaVersion
  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"

  testCompile("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkConnectorVersion}:tests")
  testCompile("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkConnectorVersion}:tests")
  testCompile("org.apache.spark:spark-streaming-kafka-0-10_${scalaBinaryVersion}:${sparkConnectorVersion}:tests")
  testCompile("org.apache.spark:spark-sql-kafka-0-10_${scalaBinaryVersion}:${sparkConnectorVersion}:tests")
  testCompile("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkConnectorVersion}:tests")

  testRuntime project(":snappy-core_${scalaBinaryVersion}:spark${sparkConnectorVersion}")
  testRuntime files("${projectDir}/../tests/common/src/main/resources")
  testRuntime "org.pegdown:pegdown:${pegdownVersion}"
}

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}

scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

def downloadApacheSparkDist(String ver, String distName, String prodDir) {
  return tasks.create("downloadApache${ver}SparkDist", Download) {
    outputs.files "${prodDir}.tgz", "${prodDir}/README.md"

    src "http://archive.apache.org/dist/spark/spark-${ver}/${distName}.tgz"
    dest sparkDistDir
    onlyIfNewer true

    doFirst {
      mkdir(sparkDistDir)
    }
  }
}

def taskGetApacheSparkDist(String ver, String distName, String prodDir) {
  return tasks.create("getApacheSpark${ver}Dist") {
    dependsOn downloadApacheSparkDist(ver, distName, prodDir)

    outputs.files "${prodDir}.tgz", "${prodDir}/README.md"

    doLast {
      if (osName.isWindows()) {
        copy {
          from tarTree(resources.gzip("${sparkDistDir}/${distName}.tgz"))
          into sparkDistDir
        }
      } else {
        // gradle tarTree does not preserve symlinks (GRADLE-2844)
        exec {
          executable 'tar'
          args 'xzf', "${distName}.tgz"
          workingDir = sparkDistDir
        }
      }
    }
  }
}

task getApacheSparkDist {
  dependsOn taskGetApacheSparkDist(sparkConnectorVersion, sparkConnectorDistName, sparkConnectorProductDir)
  dependsOn taskGetApacheSparkDist(sparkCurrentVersion, sparkCurrentDistName, sparkCurrentProductDir)
}

test.dependsOn ':cleanJUnit'
dunitTest.dependsOn getApacheSparkDist
dunitSecurityTest.dependsOn getApacheSparkDist
// SplitClusterDUnitSecurityTest.testSnappyStreamingJob needs cluster tests
dunitSecurityTest.dependsOn ":snappy-cluster_${scalaBinaryVersion}:testClasses"
check.dependsOn test, scalaTest, dunitTest
if (rootProject.hasProperty('snappydata.enterprise')) {
  check.dependsOn dunitSecurityTest
}

archivesBaseName = "snappydata-core-spark${sparkConnectorVersion}_${scalaBinaryVersion}"
