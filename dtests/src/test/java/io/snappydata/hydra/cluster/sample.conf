hydra.Prms-testDescription = "
This test starts the snappy cluster, initializes snappyContext.
Creates Row,Column Table using SQL way, loads the parquet data into tables.
And then executes the user provided sql script";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/libs/gemfirexd-2.0-BETA.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../../dtests/build-artifacts/scala-2.10/libs/gemfirexd-scala-tests-0.1.0-SNAPSHOT-tests.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../../spark/sql/catalyst/build-artifacts/scala-2.10/libs/snappy-spark-catalyst_2.10-1.6.0-SNAPSHOT.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/snappydata-assembly_2.10-0.3-SNAPSHOT-hadoop2.4.1.jar;
hydra.VmPrms-extraClassPaths        += /home/swati/.gradle/caches/modules-2/files-2.1/org.scala-lang/scala-library/2.10.6/421989aa8f95a05a4f894630aad96b8c7b828732/scala-library-2.10.6.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS/../../libs/derby.jar:$JTESTS/../../libs/derbyclient.jar:$JTESTS/../../libs/gemfire-hydra-tests-2.0-SNAPSHOT.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/datanucleus-api-jdo-3.2.6.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/datanucleus-core-3.2.10.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/datanucleus-rdbms-3.2.9.jar;
hydra.VmPrms-extraClassPaths        += /export/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derby.jar;
hydra.VmPrms-extraClassPaths        += /export/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derbynet.jar;
hydra.VmPrms-extraClassPaths        += /export/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derbyclient.jar;

hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;
//hydra.GemFirePrms-logLevel                 = fine;
hydra.GemFirePrms-names = gemfire1;
hydra.ClientPrms-gemfireNames = gemfire1;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP leadThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1 " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
  runMode = always
  threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyConfig
  runMode = always
  threadGroups = locatorThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyConfig
  runMode = always
  threadGroups = snappyStoreThreads, leadThreads, snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeConfigDataToFiles
  runMode = always
  threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLocator
  runMode = always
  threadGroups = locatorThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyServers
  runMode = always
  threadGroups = snappyStoreThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLeader
  runMode = always
  threadGroups = leadThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappy
  threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_getClientConnection
  threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScriptsInInitTask
  threadGroups = snappyThreads;


INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = runQuery
  threadGroups = snappyThreads;

TASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScriptsInTask
  threadGroups = snappyThreads
  maxTimesToRun = 5;

TASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJobInTask
  threadGroups = leadThreads
  maxTimesToRun = 3;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
  threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLeader
threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyServers
threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLocator
threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_deleteSnappyConfig
threadGroups = snappyThreads;

ENDTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
clientNames = locator1;

hydra.Prms-totalTaskTimeSec           = 900;
hydra.Prms-maxResultWaitSec           = 900;

hydra.Prms-maxCloseTaskResultWaitSec  = 900;
hydra.Prms-serialExecution            = false;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.VmPrms-extraVMArgs   += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${B}Hosts}, true)"
                             ncf;
hydra.VmPrms-extraVMArgsSUN += "-XX:PermSize=64M -XX:MaxPermSize=256m";

io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNamesForInitTask = create_and_load_column_table.sql create_and_load_row_table.sql;
io.snappydata.hydra.cluster.SnappyPrms-sqlScriptParamsForInitTask = airlineParquetData airportcodeParquetData;
io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNamesForTask = olap_queries.sql oltp_queries.sql;
io.snappydata.hydra.cluster.SnappyPrms-jobClassNamesForTask = io.snappydata.hydra.AirlineDataQueriesJob;
io.snappydata.hydra.cluster.SnappyPrms-jobExecutionTimeInMillisForTask = 720000;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = gemfirexd-scala-tests-0.1.0-SNAPSHOT-tests.jar;
