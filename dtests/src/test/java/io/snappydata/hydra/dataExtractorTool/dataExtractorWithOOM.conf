hydra.Prms-testRequirement = "Test to verify, dataExtractor feature when nodes are down with OOME.";
 hydra.Prms-testDescription = "The test starts a normal cluster ,creates tables and populates it,
 at the same time, submit a job that introduces OOME in all of the server nodes.
  Then the cluster is stopped and restarted in recovery mode.
  After the cluster is started in recovery mode, full resultset validation is done.";

 INCLUDE $JTESTS/io/snappydata/hydra/northwind/startEmbeddedModeCluster.conf;

 INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
             io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName}
             io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
             threadGroups = snappyThreads;

 // Take table count
 INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isBeforeRestart = true
             threadGroups = snappyThreads;

 //Populate column table
 TASK        taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
             io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName1}
             threadGroups = snappyStoreThreads
             maxTimesToRun = 3
             maxThreads = 1;

//Populate row table
 TASK        taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
             io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = ${scriptName2}
             threadGroups = snappyStoreThreads
             maxTimesToRun = 3
             maxThreads = 1;

//Execute job to introduce OOME
 TASK       taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.dataExtractorTool.DataExtractorTestOOM
            io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
            threadGroups = snappyStoreThreads
            maxThreads = 2
            ;

 //Stop the cluster
 INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_stopCluster
             io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyBinPath}
             threadGroups = snappyThreads;

INCLUDE $JTESTS/io/snappydata/hydra/dataExtractorTool/dataExtractorToolStartStopCluster.conf;

//TODO Execute the extracted DDLs and then load data using the saved data in parquet format
INCLUDE $JTESTS/io/snappydata/hydra/northwind/stopEmbeddedModeCluster.conf;

hydra.Prms-maxResultWaitSec = 10800; // 3hrs
hydra.Prms-totalTaskTimeSec = 10800; // 3hrs
io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverMemory = 4g;
