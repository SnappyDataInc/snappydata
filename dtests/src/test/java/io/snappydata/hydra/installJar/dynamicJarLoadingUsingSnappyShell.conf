hydra.Prms-testRequirement = "Test to verify dynamic jar loading feature by using gemxd install-jar and replace-jar commands and then accessing the classes through snappy job.";
hydra.Prms-testDescription = "
This test starts the snappy cluster and spark cluster, then initializes snappyContext.
Creates classes with version 1 and jar packaging these classes at runtime, then executes the gemxd install-jar command to install a local jar file to RowStore.
It then creates the snappy job dynamically and a jar containing this job, then executes the snappy job with the created jar.
Test then modify the jar dynamically by creating classes with version 2 in one jar and then executes the gemxd replace-jar command
to replace an installed JAR file with the contents of a new JAR file.
Again the job is created dynamically and then executes the snappyjob with the modified jar.
Test then removes the jar using remove-jar command and again executes the snappy job to verify that we get expected ClassNotFoundException.
Test verifies that the classes loaded through install-jar and replace-jar command are accessible to the snappy job.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;
hydra.GemFirePrms-names = gemfire1;
hydra.ClientPrms-gemfireNames = gemfire1;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP leadThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1 " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
            runMode = always
            threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLocatorConfig
            runMode = always
            threadGroups = locatorThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorConfigData
            runMode = always
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyServerConfig
            runMode = always
            threadGroups = snappyStoreThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeServerConfigData
            runMode = always
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLeadConfig
            runMode = always
            threadGroups = leadThreads, snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLeadConfigData
            runMode = always
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLocator
            runMode = always
            threadGroups = locatorThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyServers
            runMode = always
            threadGroups = snappyStoreThreads;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLeader
            runMode = always
            threadGroups = leadThreads;

/*INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeInstallJarCommand
            io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
            //io.snappydata.hydra.cluster.SnappyPrms-jarIdentifier = myJar
            threadGroups = snappyThreads;*/

INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeInstallJarCommand_DynamicJarLoading
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeSnappyJob_DynamicJarLoading
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames= DynamicJarLoadingJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "classVersion=1,numServers=${snappyStoreHosts},expectedException=false"
            io.snappydata.hydra.cluster.SnappyPrms-numTimesToRetry = 2
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeReplaceJarCommand_DynamicJarLoading
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeSnappyJob_DynamicJarLoading
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames= DynamicJarLoadingJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "classVersion=2,numServers=${snappyStoreHosts},expectedException=false"
            io.snappydata.hydra.cluster.SnappyPrms-numTimesToRetry = 2
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeRemoveJarCommand_DynamicJarLoading
            threadGroups = snappyThreads;

INITTASK    taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeSnappyJob_DynamicJarLoading
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames= DynamicJarLoadingJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "classVersion=2,numServers=${snappyStoreHosts},expectedException=true"
            io.snappydata.hydra.cluster.SnappyPrms-numTimesToRetry = 2
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLeader
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyServers
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLocator
            threadGroups = snappyThreads;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_deleteSnappyConfig
            threadGroups = snappyThreads;

ENDTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
            clientNames = locator1;

hydra.Prms-totalTaskTimeSec           = 100;
hydra.Prms-maxResultWaitSec           = 900;

hydra.Prms-maxCloseTaskResultWaitSec  = 900;
hydra.Prms-serialExecution            = true;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.VmPrms-extraVMArgs   += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${B}Hosts}, true)"
                             ncf;
hydra.VmPrms-extraVMArgsSUN += "-XX:PermSize=64M -XX:MaxPermSize=256m";
