hydra.Prms-testRequirement = "Test to verify the basic policy creation/deletion functionality with SnappyJob";
hydra.Prms-testDescription = "Test to verify the basic policy creation/deletion functionality with SnappyJob";

INCLUDE $JTESTS/io/snappydata/hydra/security/startSnappyCluster.conf;

INITTASK    taskClass   = io.snappydata.hydra.security.SnappySecurityTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = create_and_load_columnTables_persistent.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            io.snappydata.hydra.security.SnappySecurityPrms-userName = gemfire2
            io.snappydata.hydra.security.SnappySecurityPrms-passWord = gemfire2
            threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.security.SnappySecurityTest taskMethod  = HydraTask_performGrantRevokeCmd
           io.snappydata.hydra.security.SnappySecurityPrms-userName = gemfire3 gemfire4
           io.snappydata.hydra.security.SnappySecurityPrms-passWord = gemfire3 gemfire4
           io.snappydata.hydra.security.SnappySecurityPrms-isGrant = true
           io.snappydata.hydra.security.SnappySecurityPrms-onSchema = gemfire2.employees gemfire2.categories
           io.snappydata.hydra.security.SnappySecurityPrms-dmlOperations = SELECT INSERT UPDATE DELETE
           threadGroups = snappyThreads;

// This will create policy,enable RLS ,validate the query.
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.security.rls.RLSSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = " schema1=gemfire2.employees --conf schema2=gemfire2.categories --conf user3=gemfire3 --conf user4=gemfire4 "
            io.snappydata.hydra.security.SnappySecurityPrms-passFile = "${passFilePath}/user2Credentials.txt" 
            threadGroups = snappyThreads
            ;
/*
// This will create policy,enable RLS ,validate the query.
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.security.rls.RLSSnappyJob
            io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer = "--conf dataFilesLocation=${dataFilesLocation} --conf schema1=gemfire2.employees --conf schema2=gemfire2.categories --conf user3=user3 --conf user4=user4"
            //io.snappydata.hydra.cluster.SnappyPrms-sparkSubmitExtraPrms = " --conf spark.snappydata.store.user=gemfire2 --conf spark.snappydata.store.password=gemfire2"
            threadGroups = snappyThreads
            ;
*/
INCLUDE $JTESTS/io/snappydata/hydra/security/stopSnappyCluster.conf;

hydra.Prms-totalTaskTimeSec           = 100;
hydra.Prms-maxResultWaitSec           = 1800;

hydra.Prms-maxCloseTaskResultWaitSec  = 1800;
hydra.Prms-serialExecution            = true;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-shufflePartitions = 6;
io.snappydata.hydra.cluster.SnappyPrms-serverMemory = 4g;
io.snappydata.hydra.security.SnappySecurityPrms-isRLS = true;
io.snappydata.hydra.cluster.SnappyPrms-locatorLauncherProps += " -J-Dsnappydata.enable-rls=true ";
io.snappydata.hydra.cluster.SnappyPrms-serverLauncherProps += " -J-Dsnappydata.enable-rls=true ";
io.snappydata.hydra.cluster.SnappyPrms-leaderLauncherProps += " -J-Dsnappydata.enable-rls=true ";

