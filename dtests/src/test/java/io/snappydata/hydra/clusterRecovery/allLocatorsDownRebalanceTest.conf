hydra.Prms-testRequirement = "Test to verify cluster recovery when a new server node is added in the existing cluster.";
hydra.Prms-testDescription = "The test starts a cluster ,populates data ,after which data count is taken for later validation,then all the locators are shut down ,
then in the running cluster try adding a new node which fails as expected,then kill a server node,restart the cluster.
 then rebalance procedure is called and issues  abrupt server kill commands in middle of rebalance.After that cluster is restarted and data validation is done. ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

//threadGroups
INCLUDE $JTESTS/io/snappydata/hydra/cdcConnector/threadGroups.inc;

//Initial threadGroups
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = initSnappyArtifacts
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_recordProcessIDWithHost
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;


INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = createAndLoadMixedTables.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            threadGroups = snappyInitThread;


//Do Validation take data count of all the tables .
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = storeDataCount
            threadGroups = snappyInitThread;

//get all locators down :
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = performHA
           // io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeInfoforHA=" dev3 -dir=/nfs/users/spillai/locator "
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = dev4
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = locators
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isOnlyStop = true
            threadGroups = snappyInitThread;

//Add a new server node,when all locators are down (GemFireConfigException expected)
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = addNewNode
            //io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeInfoforHA=" dev4 -dir=/nfs/users/spillai/dev4 "
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = dev4
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = false
            threadGroups = snappyInitThread;

//Restart the cluster,this will start the locators also
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_clusterRestart
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = allNodes
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isStopStartCluster=false
            threadGroups = snappyInitThread;

//Again add the new server node,this time it should succeed.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = addNewNode
            //io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeInfoforHA=" dev4 -dir=/nfs/users/spillai/dev4 "
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = dev4
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = false
            threadGroups = snappyInitThread;

// trigger rebalance
TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = performRebalance
           threadGroups = snappyTaskThread1
           maxTimesToRun = 1
           maxThreads = 1;

//While rebalance is on,issue mean kill.
TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = meanKillProcesses
           threadGroups = snappyTaskThread2
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-numNodes=1
           maxTimesToRun = 1
           maxThreads = 1;

//restart the cluster.
CLOSETASK  taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_clusterRestart
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = allNodes
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isStopStartCluster=false
           threadGroups = snappyInitThread;

CLOSETASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
           threadGroups = snappyInitThread;


io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;

io.snappydata.hydra.cluster.SnappyPrms-isLongRunningTest = true;
hydra.Prms-maxResultWaitSec = 10800; // 3 hours
hydra.Prms-totalTaskTimeSec = 18000; // 5 hours

