hydra.Prms-testRequirement = "Test to verify cluster recovery when a new server/lead node starts first in the existing cluster.";
hydra.Prms-testDescription = "Test to verify cluster recovery when a new server/lead node starts first in the existing cluster. ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

//threadGroups
INCLUDE $JTESTS/io/snappydata/hydra/cdcConnector/threadGroups.inc;

//Initial threadGroups
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = initSnappyArtifacts
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;


INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = createAndLoadColocatedTables.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            threadGroups = snappyInitThread;

//Do Validation take data count of all the tables loaded.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = storeDataCount
            threadGroups = snappyInitThread;

//Start a new server node first.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = ${newNode}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyFileLoc}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = true
            threadGroups = snappyInitThread;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
            threadGroups = snappyInitThread;

//Stop the cluster
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_stopCluster
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyFileLoc}
            threadGroups = snappyInitThread;

//Start lead node first and then the servers.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = ${leadNode}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyFileLoc}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = leads
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = true
            threadGroups = snappyInitThread;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = validateDataCount
            threadGroups = snappyInitThread;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-isLongRunningTest = true;
hydra.Prms-maxResultWaitSec = 10800; // 3 hours
hydra.Prms-totalTaskTimeSec = 18000; // 5 hours

